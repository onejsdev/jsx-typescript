=== tests/cases/conformance/jsx/jsxEsprimaFbTestSuite.ts ===
/// <JSX factory="React.createElement" />
declare var React: any;
>React : any

declare var 日本語;
>日本語 : any

declare var AbC_def;
>AbC_def : any

declare var LeftRight;
>LeftRight : any

declare var x;
>x : any

declare var a;
>a : any

declare var props;
>props : any

<a />;
><a /> : any
><a /> : {}
>a : any

//<n:a n:v />; Namespace unsuported

//<a n:foo="bar"> {value} <b><c /></b></a>;  Namespace unsuported

<a b={" "} c=" " d="&amp;" e="id=1&group=2" f="&#123456789" g="&#123*;" h="&#x;" />;
><a b={" "} c=" " d="&amp;" e="id=1&group=2" f="&#123456789" g="&#123*;" h="&#x;" /> : any
><a b={" "} c=" " d="&amp;" e="id=1&group=2" f="&#123456789" g="&#123*;" h="&#x;" /> : { b: string; c: string; d: string; e: string; f: string; g: string; h: string; }
>a : any
>b : string
>c : string
>d : string
>e : string
>f : string
>g : string
>h : string

<a b="&notanentity;" />;
><a b="&notanentity;" /> : any
><a b="&notanentity;" /> : { b: string; }
>a : any
>b : string

<a
><a/> : any
><a/> : {}
>a : any

/>;

<日本語></日本語>;
><日本語></日本語> : any
><日本語> : {}
>日本語 : any
>日本語 : unknown

<AbC_def
><AbC_def  test="&#x0026;&#38;">barbaz</AbC_def> : any
><AbC_def  test="&#x0026;&#38;"> : { test: string; }
>AbC_def : any

  test="&#x0026;&#38;">
>test : string

bar
baz
</AbC_def>;
>AbC_def : unknown

<a b={x ? <c /> : <d />} />;
><a b={x ? <c /> : <d />} /> : any
><a b={x ? <c /> : <d />} /> : { b: any; }
>a : any
>b : any
>x ? <c /> : <d /> : any
>x : any
><c /> : any
><c /> : {}
>c : unknown
><d /> : any
><d /> : {}
>d : unknown

<a>{}</a>;
><a>{}</a> : any
><a> : {}
>a : any
>a : unknown

<a>{/* this is a comment */}</a>;
><a>{/* this is a comment */}</a> : any
><a> : {}
>a : any
>a : unknown

<div>@test content</div>;
><div>@test content</div> : any
><div> : {}
>div : unknown
>div : unknown

<div><br />7x invalid-js-identifier</div>;
><div><br />7x invalid-js-identifier</div> : any
><div> : {}
>div : unknown
><br /> : any
><br /> : {}
>br : unknown
>div : unknown

<LeftRight left=<a /> right=<b>monkeys /> gorillas</b> />;
><LeftRight left=<a /> right=<b>monkeys /> gorillas</b> /> : any
><LeftRight left=<a /> right=<b>monkeys /> gorillas</b> /> : { left: any; right: any; }
>LeftRight : any
>left : any
><a /> : any
><a /> : {}
>a : any
>right : any
><b>monkeys /> gorillas</b> : any
><b> : {}
>b : unknown
>b : unknown

<a.b></a.b>;
><a.b></a.b> : any
><a.b> : {}
>a : any
>b : any
>a : unknown
>b : unknown

<a.b.c></a.b.c>;
><a.b.c></a.b.c> : any
><a.b.c> : {}
>a : any
>b : any
>c : any
>a : unknown
>b : unknown
>c : unknown

(<div />) < x;
>(<div />) < x : boolean
>(<div />) : any
><div /> : any
><div /> : {}
>div : unknown
>x : any

<div {...props} />;
><div {...props} /> : any
><div {...props} /> : {}
>div : unknown
>props : any

<div {...props} post="attribute" />;
><div {...props} post="attribute" /> : any
><div {...props} post="attribute" /> : { post: string; }
>div : unknown
>props : any
>post : string

<div pre="leading" pre2="attribute" {...props}></div>;
><div pre="leading" pre2="attribute" {...props}></div> : any
><div pre="leading" pre2="attribute" {...props}> : { pre: string; pre2: string; }
>div : unknown
>pre : string
>pre2 : string
>props : any
>div : unknown

<a>    </a>;
><a>    </a> : any
><a> : {}
>a : any
>a : unknown

